#!/usr/bin/env python
# coding: utf-8

# In[283]:


## plot for top5 promts
import matplotlib.pyplot as plt
import numpy as np

# Data provided for the plot
data = [[0.8387096774193549, 0.8258064516129032, 0.8193548387096774, 0.6903225806451613, 0.6258064516129032],
[0.5644171779141105, 0.5276073619631902, 0.5030674846625767, 0.49693251533742333, 0.48466257668711654],
[0.8133333333333334, 0.8066666666666666, 0.5533333333333333, 0.5133333333333333, 0.4733333333333334],
[0.49693251533742333, 0.29447852760736193, 0.2883435582822086, 0.2883435582822086, 0.28220858895705525],
[0.8162162162162162, 0.8108108108108107, 0.8054054054054054, 0.7945945945945946, 0.7837837837837838],
[0.735632183908046, 0.7126436781609196, 0.6839080459770115, 0.6781609195402298, 0.6551724137931034],
[0.8927038626609443, 0.8884120171673819, 0.8755364806866953, 0.8712446351931331, 0.7939914163090129],
[0.8313253012048193, 0.7771084337349398, 0.7710843373493976, 0.7650602409638554, 0.7409638554216867],
[0.8390804597701149, 0.8390804597701149, 0.8333333333333334, 0.8275862068965517, 0.8160919540229885]]





labels = ['Prompt 1', 'Prompt 2', 'Prompt 3', 'Prompt 4', 'Prompt 5', 'Prompt 6', 'Prompt 7', 'Prompt 8', 'Prompt 9']

# Plotting the box plot with updated labels
plt.figure(figsize=(12, 8))
plt.boxplot(data, patch_artist=True, notch=False, labels=labels)
plt.title('Whisker Plot of Lavenshtein Distance for Top 5 Prompts')
plt.ylabel('Values')
plt.grid(True)
plt.show()


# In[108]:


metrics = []
for series in data:
    mean = np.mean(series)
    median = np.median(series)
    std_dev = np.std(series, ddof=1)  # Using ddof=1 for sample standard deviation
    min_val = np.min(series)
    max_val = np.max(series)
    print({'mean': mean, 'median': median, 'std_dev': std_dev, 'min': min_val, 'max': max_val})



# In[299]:


## plot for top10 promts

data =[[0.8387096774193549, 0.8258064516129032, 0.8193548387096774, 0.6903225806451613, 0.6258064516129032, 0.6129032258064516, 0.6064516129032258, 0.5032258064516129, 0.367741935483871],
[0.5644171779141105, 0.5276073619631902, 0.5030674846625767, 0.49693251533742333, 0.48466257668711654, 0.47239263803680986, 0.4601226993865031, 0.4601226993865031, 0.4355828220858896],
[0.8133333333333334, 0.8066666666666666, 0.5533333333333333, 0.5133333333333333, 0.4733333333333334, 0.45999999999999996, 0.42000000000000004, 0.4066666666666666, 0.3466666666666667],
[0.49693251533742333, 0.29447852760736193, 0.2883435582822086, 0.2883435582822086, 0.28220858895705525, 0.28220858895705525, 0.28220858895705525, 0.28220858895705525, 0.2760736196319018],
[0.8162162162162162, 0.8108108108108107, 0.8054054054054054, 0.7945945945945946, 0.7837837837837838, 0.6756756756756757, 0.6702702702702703, 0.654054054054054, 0.6486486486486487],
[0.735632183908046, 0.7126436781609196, 0.6839080459770115, 0.6781609195402298, 0.6551724137931034, 0.6264367816091954, 0.5747126436781609, 0.5172413793103448, 0.39655172413793105],
[0.8927038626609443, 0.8884120171673819, 0.8755364806866953, 0.8712446351931331, 0.7939914163090129, 0.7854077253218884, 0.7811158798283262, 0.7768240343347639, 0.6695278969957081],
[0.8313253012048193, 0.7771084337349398, 0.7710843373493976, 0.7650602409638554, 0.7409638554216867, 0.7409638554216867, 0.6867469879518072, 0.6746987951807228, 0.6385542168674698],
[0.8390804597701149, 0.8390804597701149, 0.8333333333333334, 0.8275862068965517, 0.8160919540229885, 0.8103448275862069, 0.7873563218390804, 0.4482758620689655, 0.44252873563218387]]

labels = ['Prompt 1', 'Prompt 2', 'Prompt 3', 'Prompt 4', 'Prompt 5', 'Prompt 6', 'Prompt 7', 'Prompt 8', 'Prompt 9']

# Plotting the box plot with updated labels
plt.figure(figsize=(12, 8))
plt.boxplot(data,patch_artist=True, labels=labels)
plt.title('Whisker Plot of Lavenshtein Distance for Top 5 Prompts')
plt.ylabel('Values')
plt.grid(True)
plt.show()


# In[300]:


metrics = []
for series in data:
    mean = np.mean(series)
    median = np.median(series)
    std_dev = np.std(series, ddof=1)  # Using ddof=1 for sample standard deviation
    min_val = np.min(series)
    max_val = np.max(series)
    print({'mean': mean, 'median': median, 'std_dev': std_dev, 'min': min_val, 'max': max_val})

